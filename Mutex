#include <stdio.h>
#include <pthread.h>

#define NUM_THREADS 5 // Choose any number of threads

pthread_mutex_t mutex;
int sum = 0;

void* thread_function(void* thread_id) {
    int tid = *((int*)thread_id);

    // Increment the shared variable by thread ID
    pthread_mutex_lock(&mutex);
    sum += tid;
    pthread_mutex_unlock(&mutex);

    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int thread_ids[NUM_THREADS];

    pthread_mutex_init(&mutex, NULL);

    // Create threads and assign thread IDs
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_ids[i] = i;
        pthread_create(&threads[i], NULL, thread_function, (void*)&thread_ids[i]);
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Print the sum
    printf("Sum of thread IDs: %d\n", sum);

    pthread_mutex_destroy(&mutex);
    return 0;
}
